@page "/dice"
@using Blazored.LocalStorage
@using Microsoft.Extensions.Logging
@inject ILocalStorageService LocalStorage
@inject ILogger<DicePage> Logger
@inject DiceJsInterop Js

<PageTitle>Dice</PageTitle>

<div class="dice">
    <DieComponent MaxValue="3" ImagePath="./_content/Artisan.Pages.DiceThrower/dice-d3.svg" LogTo="@Log"></DieComponent>
    <DieComponent MaxValue="4" ImagePath="./_content/Artisan.Pages.DiceThrower/dice-d4.svg" LogTo="@Log"></DieComponent>
    <DieComponent MaxValue="6" ImagePath="./_content/Artisan.Pages.DiceThrower/dice-d6.svg" LogTo="@Log"></DieComponent>
    <DieComponent MaxValue="8" ImagePath="./_content/Artisan.Pages.DiceThrower/dice-d8.svg" LogTo="@Log"></DieComponent>
    <DieComponent MaxValue="10" ImagePath="./_content/Artisan.Pages.DiceThrower/dice-d10.svg" LogTo="@Log"></DieComponent>
    <DieComponent MaxValue="12" ImagePath="./_content/Artisan.Pages.DiceThrower/dice-d12.svg" LogTo="@Log"></DieComponent>
    <DieComponent MaxValue="20" ImagePath="./_content/Artisan.Pages.DiceThrower/dice-d20.svg" LogTo="@Log"></DieComponent>
    <DieComponent MaxValue="100" ImagePath="./_content/Artisan.Pages.DiceThrower/dice-d100.svg" LogTo="@Log"></DieComponent>
    
</div>
<div class="console">
    <span onclick="@DropLogsAsync" class="console__drop">[НАЖМИТЕ ЧТОБЫ СБРОСИТЬ ЛОГИ]</span><br/>
    @foreach (var log in _logs)
    {
        @log
        <br/>
    }
</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        var logs = await LocalStorage.GetItemAsync<Stack<string>>(LocalStorageKeyName);
        logs ??= new Stack<string>();;

        _logs = logs;
    }

    private void Log(string s)
    {
        string log = $"{DateTime.Now:s}: {s}\n";
        _logs.Push(log);
        _ = BackupLogsAsync();
        StateHasChanged();
    }
        
    private const string LocalStorageKeyName = "DiceLogs";
    private async Task BackupLogsAsync()
    {
        var backup = _logs.ToArray();
        await LocalStorage.SetItemAsync(LocalStorageKeyName, backup);
        Logger.LogInformation("Saved {Count} items to dice backup", backup.Length);
    }

    private async Task DropLogsAsync()
    {
        if (await Js.ConfirmAsync("Вы уверены что хотите сбросить логи?") is false)
            return;
        
        await LocalStorage.RemoveItemAsync(LocalStorageKeyName);
        _logs.Clear();
    }
    
    private Stack<string> _logs = new();
}